Project jst

Bioinformatics applications, particularly the ones that need to compare entire genomes, are highly demanding in terms of computational resources. Due to this reason, Grid/Cloud technology
appears to fit the requirements of such applications since it can provide the needed computational
power as well as the storage resources to record the data produced.

Grid environment, with its huge amount of storage and CPU power, proves to be very effective
when the applications can be divided in a number, that can even be large, of independent tasks. In this case each independent task can be assigned to one of the many Worker Nodes available over
the full grid infrastructure with the effect of reducing the time needed to reach the solution. The
drawback is that even simple problems may require the submission to the Grid and the
management of a quite large number of jobs.

The Job Submission Tool (JST) was initially developed in order to simplify the submission,
management and bookkeeping of large number of jobs required by particular bioinformatics use
cases developed inside the LIBI and BioinfoGRID [2] projects. JST has already been used with
success to run a full list of bioinformatics applications on the INFNgrid and EGEE/EGI Grid
infrastructures.

JST has recently undergone a major rewrite, in particular for what concerns the interaction with the
user; in particular a WEB services interface has been added. In this way it is now possible to access JST also from within workflows managers like Taverna (particularly diffused within the
bioinformatics community) and LONI.

The JST architecture is shown in the Fig. 11. The system is made of three macro-elements:
1) Database: contains the TaskList (list of tasks (job) to be executed) and the configuration parameters
2) FrontEnd: used to fill the TaskList via Web Services (RestFul/Soap). The user can interact
with the FrontEnd in several ways: from a Client applications, a Web browser or through a
Workflow engine (eg. Taverna), or a combination of the above.
3) BackEnd: is an Application daemon, that runs in the background and submits jobs, empting
the TaskList. Several instances of the BackEnd can be executed simultaneously each
configured in order to take care of specific job submission (Interactive or Dedicated server,
Batch cluster, EGI GRID infrastructure, CLOUD IaaS), The BackEnd takes care of the job
scheduling and user notification.
